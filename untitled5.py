# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UczRyeS8F4x-XaUJgVwLKlcN4qAL0R_Y
"""

install gradio
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
from scipy.stats import norm
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from catboost import CatBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
import xgboost as xgb
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.preprocessing import RobustScaler
df = pd.read_csv('dataset_traffic_accident_prediction1.csv')
df.describe()
df.info()
df.isnull().sum()
columns_with_missing = ['Traffic_Density', 'Speed_Limit', 'Number_of_Vehicles', 'Driver_Alcohol',
'Driver_Age', 'Driver_Experience',
'Accident']
for i in columns_with_missing:
print(f"{i} - Среднее: {df[i].mean()}, Медиана: {df[i].median()}")
df[i].plot(kind='hist', bins=30, title=i)
plt.axvline(df[i].mean(), color='red', linestyle='dashed', linewidth=2)
plt.axvline(df[i].median(), color='blue', linestyle='dashed', linewidth=2)
plt.show()
df['Traffic_Density'].fillna(df['Traffic_Density'].median(), inplace=True)
df['Speed_Limit'].fillna(df['Speed_Limit'].median(), inplace=True)
df['Number_of_Vehicles'].fillna(df['Number_of_Vehicles'].median(), inplace=True)
df['Driver_Alcohol'].fillna(df['Driver_Alcohol'].median(), inplace=True)
df['Driver_Age'].fillna(df['Driver_Age'].median(), inplace=True)
df['Driver_Experience'].fillna(df['Driver_Experience'].median(), inplace=True)
df['Accident'].fillna(df['Accident'].median(), inplace=True)
columns_miss = df.columns[df.isnull().sum() > 0]
df[columns_miss].info()
df['Weather'] = df['Weather'].fillna(df['Weather'].mode()[0])
df['Road_Type'] = df['Road_Type'].fillna(df['Road_Type'].mode()[0])
df['Time_of_Day'] = df['Time_of_Day'].fillna(df['Time_of_Day'].mode()[0])
df['Accident_Severity'] = df['Accident_Severity'].fillna(df['Accident_Severity'].mode()[0])
df['Road_Condition'] = df['Road_Condition'].fillna(df['Road_Condition'].mode()[0])l().sum()
duplicates_count = df.duplicated().sum()
print(f"Duplication: {duplicates_count}")
df = df.drop_duplicates()
duplicates_count1 = df.duplicated().sum()
print(f"Duplication: {duplicates_count1}")
fig, axes = plt.subplots(3, 2, figsize=(15, 12))
sns.boxplot(x=df['Speed_Limit'], ax=axes[0, 0])
axes[0, 0].set_title('Speed_Limit')
sns.boxplot(x=df['Number_of_Vehicles'], ax=axes[0, 1])
axes[0, 1].set_title('Number_of_Vehicles')
sns.boxplot(x=df['Driver_Age'], ax=axes[1, 0])
axes[1, 0].set_title('Driver_Age')
sns.boxplot(x=df['Driver_Experience'], ax=axes[1, 1])
axes[1, 1].set_title('Driver_Experience')
sns.boxplot(x=df['Traffic_Density'], ax=axes[2, 0])
axes[2, 0].set_title('Traffic_Density')
fig.delaxes(axes[2, 1])
plt.tight_layout()
plt.show()
cols = ['Speed_Limit', 'Number_of_Vehicles', 'Driver_Age', 'Driver_Experience']
sns_plot = sns.pairplot(df[cols])
sns_plot.savefig('pairplot.png')
numeric_df = df.select_dtypes(include=['number'])
spearman_corr = numeric_df.corr(method='spearman')
print(spearman_corr)
plt.figure(figsize=(8, 7))
sns.heatmap(spearman_corr, annot=True, fmt=".2f", cmap='coolwarm', cbar=True)
plt.title('Spearman Correlation Matrix')
plt.show()
df = pd.get_dummies(df, columns=['Weather', 'Road_Type', 'Time_of_Day', 'Accident_Severity',
'Road_Condition', 'Vehicle_Type', 'Road_Light_Condition'], drop_first=True)
df['Age_vs_Experience'] = df['Driver_Age'] - df['Driver_Experience']
df = df.drop(['Driver_Age', 'Driver_Experience'], axis = 1)
X = df.drop(['Accident'], axis = 1)
y = df['Accident']
feature_names = X.columns
!install gradio
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
from scipy.stats import norm
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from catboost import CatBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
import xgboost as xgb
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.preprocessing import RobustScaler
df = pd.read_csv('dataset_traffic_accident_prediction1.csv')
df.describe()
df.info()
df.isnull().sum()
columns_with_missing = ['Traffic_Density', 'Speed_Limit', 'Number_of_Vehicles', 'Driver_Alcohol',
'Driver_Age', 'Driver_Experience',
'Accident']
for i in columns_with_missing:
  print(f"{i} - Среднее: {df[i].mean()}, Медиана: {df[i].median()}")
  df[i].plot(kind='hist', bins=30, title=i)
  plt.axvline(df[i].mean(), color='red', linestyle='dashed', linewidth=2)
  plt.axvline(df[i].median(), color='blue', linestyle='dashed', linewidth=2)
  plt.show()
df['Traffic_Density'].fillna(df['Traffic_Density'].median(), inplace=True)
df['Speed_Limit'].fillna(df['Speed_Limit'].median(), inplace=True)
df['Number_of_Vehicles'].fillna(df['Number_of_Vehicles'].median(), inplace=True)
df['Driver_Alcohol'].fillna(df['Driver_Alcohol'].median(), inplace=True)
df['Driver_Age'].fillna(df['Driver_Age'].median(), inplace=True)
df['Driver_Experience'].fillna(df['Driver_Experience'].median(), inplace=True)
df['Accident'].fillna(df['Accident'].median(), inplace=True)
columns_miss = df.columns[df.isnull().sum() > 0]
df[columns_miss].info()
df['Weather'] = df['Weather'].fillna(df['Weather'].mode()[0])
df['Road_Type'] = df['Road_Type'].fillna(df['Road_Type'].mode()[0])
df['Time_of_Day'] = df['Time_of_Day'].fillna(df['Time_of_Day'].mode()[0])
df['Accident_Severity'] = df['Accident_Severity'].fillna(df['Accident_Severity'].mode()[0])
df['Road_Condition'] = df['Road_Condition'].fillna(df['Road_Condition'].mode()[0])
duplicates_count = df.duplicated().sum()
print(f"Duplication: {duplicates_count}")
df = df.drop_duplicates()
duplicates_count1 = df.duplicated().sum()
print(f"Duplication: {duplicates_count1}")
fig, axes = plt.subplots(3, 2, figsize=(15, 12))
sns.boxplot(x=df['Speed_Limit'], ax=axes[0, 0])
axes[0, 0].set_title('Speed_Limit')
sns.boxplot(x=df['Number_of_Vehicles'], ax=axes[0, 1])
axes[0, 1].set_title('Number_of_Vehicles')
sns.boxplot(x=df['Driver_Age'], ax=axes[1, 0])
axes[1, 0].set_title('Driver_Age')
sns.boxplot(x=df['Driver_Experience'], ax=axes[1, 1])
axes[1, 1].set_title('Driver_Experience')
sns.boxplot(x=df['Traffic_Density'], ax=axes[2, 0])
axes[2, 0].set_title('Traffic_Density')
fig.delaxes(axes[2, 1])
plt.tight_layout()
plt.show()
cols = ['Speed_Limit', 'Number_of_Vehicles', 'Driver_Age', 'Driver_Experience']
sns_plot = sns.pairplot(df[cols])
sns_plot.savefig('pairplot.png')
numeric_df = df.select_dtypes(include=['number'])
spearman_corr = numeric_df.corr(method='spearman')
print(spearman_corr)
plt.figure(figsize=(8, 7))
sns.heatmap(spearman_corr, annot=True, fmt=".2f", cmap='coolwarm', cbar=True)
plt.title('Spearman Correlation Matrix')
plt.show()
df = pd.get_dummies(df, columns=['Weather', 'Road_Type', 'Time_of_Day', 'Accident_Severity',
'Road_Condition', 'Vehicle_Type', 'Road_Light_Condition'], drop_first=True)
df['Age_vs_Experience'] = df['Driver_Age'] - df['Driver_Experience']
df = df.drop(['Driver_Age', 'Driver_Experience'], axis = 1)
X = df.drop(['Accident'], axis = 1)
y = df['Accident']
feature_names = X.columns
numeric_columns = ['Speed_Limit', 'Number_of_Vehicles', 'Age_vs_Experience']
def predict_accident(Speed_Limit, Number_of_Vehicles, Age_vs_Experience, Weather, Road_Type, Time_of_Day, Accident_Severity,
Road_Condition, Vehicle_Type, Road_Light_Condition,
Driver_Alcohol, Traffic_Density):
# Manual encoding for categorical features
  input_data = {
  "Speed_Limit": Speed_Limit,
  "Number_of_Vehicles": Number_of_Vehicles,
  "Age_vs_Experience": Age_vs_Experience,
  "Driver_Alcohol": Driver_Alcohol,
  "Traffic_Density": Traffic_Density,
  }
  # One-hot encoded categorical fields (simulate training encoding)
  categories = {
  'Weather': ['Rainy', 'Snowy', 'Sunny'],
  'Road_Type': ['Highway', 'Rural', 'Urban'],
  'Time_of_Day': ['Day', 'Evening', 'Night'],
  'Accident_Severity': ['Low', 'Medium', 'High'],
  'Road_Condition': ['Dry', 'Wet', 'Icy'],
  'Vehicle_Type': ['Truck', 'Motorbike', 'Car'],
  'Road_Light_Condition': ['Daylight', 'Darkness']
  }
  # Encode
  for col, values in categories.items():
    for val in values[1:]: # drop_first=True was used during training
      key = f"{col}_{val}"
      input_data[key] = 1 if locals()[col] == val else 0
  # Fill missing dummy features (just in case)
  for f in feature_names:
    if f not in input_data:
      input_data[f] = 0
  # Convert to DataFrame
  input_df = pd.DataFrame([input_data])
  input_df[numeric_columns] = scaler.transform(input_df[numeric_columns])
  # Predict
  prediction = model.predict(input_df)[0]
  return "Accident" if prediction == 1 else "No Accident"
# Gradio UI
iface = gr.Interface(
fn=predict_accident,
inputs=[
gr.Number(label="Speed Limit"),
gr.Number(label="Number of Vehicles"),
gr.Number(label="Age vs Experience (Driver_Age - Driver_Experience)"),
gr.Dropdown(["Rainy", "Snowy", "Sunny"], label="Weather"),
gr.Dropdown(["Highway", "Rural", "Urban"], label="Road Type"),
gr.Dropdown(["Day", "Evening", "Night"], label="Time of Day"),
gr.Dropdown(["Low", "Medium", "High"], label="Accident Severity"),
gr.Dropdown(["Dry", "Wet", "Icy"], label="Road Condition"),
gr.Dropdown(["Truck", "Motorbike", "Car"], label="Vehicle Type"),
gr.Dropdown(["Daylight", "Darkness"], label="Road Light Condition"),
gr.Number(label="Driver Alcohol Level"),
gr.Number(label="Traffic Density"),
],
outputs="text",
title="Traffic Accident Prediction Model",
description="Enter road and driver details to predict accident likelihood")
"Speed_Limit": Speed_Limit,
"Number_of_Vehicles": Number_of_Vehicles,
"Age_vs_Experience": Age_vs_Experience,
"Driver_Alcohol": Driver_Alcohol,
"Traffic_Density": Traffic_Density,
}
# One-hot encoded categorical fields (simulate training encoding)
categories = {
'Weather': ['Rainy', 'Snowy', 'Sunny'],
'Road_Type': ['Highway', 'Rural', 'Urban'],
'Time_of_Day': ['Day', 'Evening', 'Night'],
'Accident_Severity': ['Low', 'Medium', 'High'],
'Road_Condition': ['Dry', 'Wet', 'Icy'],
'Vehicle_Type': ['Truck', 'Motorbike', 'Car'],
'Road_Light_Condition': ['Daylight', 'Darkness']
}
# Encode
for col, values in categories.items():
for val in values[1:]: # drop_first=True was used during training
key = f"{col}_{val}"
input_data[key] = 1 if locals()[col] == val else 0
# Fill missing dummy features (just in case)
for f in feature_names:
if f not in input_data:
input_data[f] = 0
# Convert to DataFrame
input_df = pd.DataFrame([input_data])
input_df[numeric_columns] = scaler.transform(input_df[numeric_columns])
# Predict
prediction = model.predict(input_df)[0]
return "Accident" if prediction == 1 else "No Accident"
# Gradio UI
iface = gr.Interface(
fn=predict_accident,
inputs=[
gr.Number(label="Speed Limit"),
gr.Number(label="Number of Vehicles"),
gr.Number(label="Age vs Experience (Driver_Age - Driver_Experience)"),
gr.Dropdown(["Rainy", "Snowy", "Sunny"], label="Weather"),
gr.Dropdown(["Highway", "Rural", "Urban"], label="Road Type"),
gr.Dropdown(["Day", "Evening", "Night"], label="Time of Day"),
gr.Dropdown(["Low", "Medium", "High"], label="Accident Severity"),
gr.Dropdown(["Dry", "Wet", "Icy"], label="Road Condition"),
gr.Dropdown(["Truck", "Motorbike", "Car"], label="Vehicle Type"),
gr.Dropdown(["Daylight", "Darkness"], label="Road Light Condition"),
gr.Number(label="Driver Alcohol Level"),
gr.Number(label="Traffic Density"),
],
outputs="text",
title="Traffic Accident Prediction Model",
description="Enter road and driver details to predict accident likelihood"